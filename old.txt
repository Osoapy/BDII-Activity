import dotenv from 'dotenv';
import express from 'express';
import pg from 'pg';
import cors from 'cors';

dotenv.config();

const { Client } = pg;

// Inicializa o cliente do PostgreSQL
const client = new Client({
    user: process.env.POSTGRES_USER,
    password: process.env.POSTGRES_PASSWORD,
    host: process.env.POSTGRES_HOST,
    port: process.env.POSTGRES_PORT,
    database: process.env.POSTGRES_DB
});

// Conecta ao banco de dados
async function conectar() {
    try {
        await client.connect();
        console.log('Conexão com o banco de dados estabelecida.');
    } catch (error) {
        console.error('Erro ao conectar ao banco de dados:', error.message);
        process.exit(1); // Encerra a aplicação se a conexão falhar
    }
}
conectar();

const app = express();
app.use(express.json());
app.use(cors());

// Rota para buscar SVG do estado e município
app.get('/svg/:estados/:municipios', async (req, res) => { 
    try {
        let estados = req.params.estados;
        let municipios = req.params.municipios;

        console.log(`estados: ${estados}, Município: ${municipios}`);

        let pathestados = await client.query(`SELECT ST_AsSVG(geom) FROM public.estados WHERE nome ilike '${estados}'`);
        let pathmunicipios = await client.query(`SELECT ST_AsSVG(geom) FROM public.municipios WHERE nome ilike '${municipios}'`);
        let viewBox = await client.query(`SELECT getViewBox('${estados}')`);

        res.json({
            pathestados: pathestados[0].st_assvg || null,
            pathmunicipios: pathmunicipios[0].st_assvg || null,
            viewBox: viewBox[0].getviewbox || null
        });
    } catch (error) {
        console.error('Erro ao executar a rota /svg:', error.message);
        res.status(500).send('Erro no servidor');
    }
});

// Inicia o servidor
app.listen(3000, () => {
    console.log('Servidor rodando em http://localhost:3000');
});